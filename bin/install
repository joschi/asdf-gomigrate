#!/usr/bin/env bash

set -e
set -o pipefail

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version}
[ -n "$ASDF_INSTALL_VERSION" ] || (echo >&2 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (echo >&2 'Missing ASDF_INSTALL_PATH' && exit 1)

install() {
  local install_type
  # shellcheck disable=SC2034
  install_type=$1
  local version
  version=$2
  local install_path
  install_path=$3
  local bin_install_path
  bin_install_path="$install_path/bin"
  local download_url
  download_url="$(get_download_url "$version")"
  local arch
  arch="$(get_arch)"
  local platform
  platform="$(get_platform)"
  local tmp_download_dir
  tmp_download_dir="$(mktemp -d -t gomigrate_XXXXXXX)"

  mkdir -p "${bin_install_path}"

  echo "Downloading migrate from ${download_url}"
  curl -sSL "$download_url" -o "${tmp_download_dir}/gomigrate.tar.gz"
  tar -xzf "${tmp_download_dir}/gomigrate.tar.gz" -C "${bin_install_path}"
  [ -f "${bin_install_path}/migrate.${platform}-${arch}" ] && mv "${bin_install_path}/migrate.${platform}-${arch}" "${bin_install_path}/migrate"
  rm -f "${tmp_download_dir}/gomigrate.tar.gz"
}

get_arch() {
  arch=$(uname -m | tr '[:upper:]' '[:lower:]')
  case ${arch} in
    arm64)
      echo 'arm64'
      ;;
    arm7|armv7l)
      echo 'arm7'
      ;;
    x86_64|amd64)
      echo 'amd64'
      ;;
    i386)
      echo '386'
      ;;
  esac
}

get_platform() {
  plat=$(uname -s | tr '[:upper:]' '[:lower:]')
  case ${plat} in
    darwin)
      echo 'darwin'
      ;;
    linux)
      echo 'linux'
      ;;
    windows)
      echo 'windows'
      ;;
  esac
}

get_download_url() {
  local version
  version="$1"
  local arch
  arch="$(get_arch)"
  local platform
  platform="$(get_platform)"
  echo "https://github.com/golang-migrate/migrate/releases/download/v${version}/migrate.${platform}-${arch}.tar.gz"
}

install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
